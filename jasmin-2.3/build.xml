<!-- ===========================================================================

Installing the build tools
==========================

The Jasmin build system is based on Jakarta Ant, which is a Java building tool
originally developed for the Jakarta Tomcat project but now used in many other
Apache projects and extended by many developers.

Ant is a little but very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://jakarta.apache.org/ant/".

Jasmin includes its own copy of the ant library in the lib directory. 

The only other thing that you have to make sure of is that the 
"JAVA_HOME" environment property is set to match the top level directory 
containing the JVM you want to use. For example:

C:\> set JAVA_HOME=C:\jdk1.4

or on Unix:

% setenv JAVA_HOME /usr/local/java
  (csh)
> JAVA_HOME=/usr/java; export JAVA_HOME
  (ksh, bash)

That's it!

Building instructions
=====================

First, make sure your current working directory is
where this very file is located. Then type:

  ./build.sh all (unix)
  build.bat all (win32)

To build the framework, examples, and tests or:

  ./build.sh (unix)
  build.bat (win32)
  
To list all the possible build targets.

If everything is right (see *) and all the required packages are visible, this action
will generate a build directory ./build, containing the jar file:

  jasmin.jar  - This jar contains the Jasmin assembler

This jar file can be run by the command

  java -jar jasmin.jar <filenames>

from within the ./build directory. 

* On Win/98 you may get an "Out of Environment Space" error message. This happens if
Windows provides too small a space for environment variables. To work around this
limitation: 
  Close the DOS window (the error can corrupt its CLASSPATH variable). 
  Open a new DOS window. Click on the MS-DOS icon at the top left of the window. 
  Select the Properties option. 
  Click on the Memory tab. 
  Adjust the "Initial Environment" drop-down box from "Auto" to "2816". 
  Click OK. 
Then try building.

-->

<project name="Jasmin" default="usage" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="Jasmin"/>
    <property name="name" value="jasmin"/>
    <property name="version" value="2.1"/>
    <property name="year" value="2006"/>

    <echo message="----------- ${Name} ${version} [${year}] ------------"/>

    <property name="build.compiler" value="modern"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="on"/>
    <property name="packages" value="jasmin.*,jas.*,scm.*"/>

    <!-- Define the source directories -->
    <property name="root.dir" value="./"/>
    <property name="docs.dir" value="${root.dir}/docs"/>
    <property name="lib.dir" value="${root.dir}/lib"/>
    <property name="src.dir" value="${root.dir}/src"/>

    <!-- Define the source build directories -->
    <property name="build.dir" value="${root.dir}/build"/>
    <property name="build.lib" value="${build.dir}/lib"/>
    <property name="build.jasmin.src" value="${build.dir}/jasmin/src"/>
    <property name="build.jasmin.dest" value="${build.dir}/jasmin/classes"/>
    <property name="apidocs.dir" value="${docs.dir}/api"/>	   	
    
    <!-- Define the distribution directories -->
    <property name="dist.root" value="${root.dir}/dist"/>
    <property name="sourcedist.dir" value="${dist.root}/${name}-${version}/${name}-${version}"/>
    <property name="compiledist.dir" value="${dist.root}/${name}-${version}/${name}-${version}"/>    
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="Jasmin Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   all        --> builds all the jars in ./build"/>
    <echo message="   parser     --> regenerates parser.java from parser.cup "/>
    <echo message="   docs       --> builds the documentation in ./docs/api"/>
    <echo message="   clean      --> restores distribution to original state"/>
    <echo message="   sourcedist --> builds and zips the source distribution"/>
    <echo message="   usage      --> (default) displays build menu"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.lib}"/>

    <copy todir="${build.lib}">
      <fileset dir="${lib.dir}"/>
    </copy>

  </target>

  <!-- =================================================================== -->
  <!-- Prepares the jasmin source code                                     -->
  <!-- =================================================================== -->
  <target name="prepare-jasmin" depends="prepare">
    <mkdir dir="${build.jasmin.src}"/>
    <mkdir dir="${build.jasmin.dest}"/>
   
    <copy todir="${build.jasmin.src}">
      <fileset dir="${src.dir}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the jasmin source code                                     -->
  <!-- =================================================================== -->
  <target name="compile-jasmin" depends="prepare-jasmin">
    <javac srcdir="${build.jasmin.src}"
           source="1.4"
           destdir="${build.jasmin.dest}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Creates the jasmin.jar in ./build                                   -->
  <!-- =================================================================== -->
  <target name="jasmin" depends="compile-jasmin">
    <jar jarfile="${root.dir}/${name}.jar"
         basedir="${build.jasmin.dest}"
         manifest="${build.jasmin.src}/jasmin.mf"
         includes="jasmin/*.class,jas/*.class,java_cup/runtime/*.class"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the JavaCup library                                        -->
  <!-- =================================================================== -->

  <target name="compile-java_cup" depends="prepare-jasmin">
    <mkdir dir="${build.jasmin.dest}/java_cup"/>
    <javac srcdir="${build.jasmin.src}/java_cup"
           source="1.4"
           destdir="${build.jasmin.dest}/java_cup"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"/>
  </target>

  <target name="java_cup" depends="compile-java_cup">
    <jar jarfile="${root.dir}/lib/java_cup.jar"
         basedir="${build.jasmin.dest}"
         includes="java_cup/*.class,java_cup/runtime/*.class"/>
  </target>

  <!-- 
  This task runs Java Cup to generate the Jasmin Parser (parser.java)
  from the CUP file (parser.cup) in the Jasmin src directory. You only need to
  run this task if you edit parser.cup.
  -->  
  <target name="parser" depends="java_cup">
    <java classname="java_cup.Main" output="test.java" input="src/jasmin/parser.cup">
		<classpath>
			<pathelement location="${root.dir}/lib/java_cup.jar"/>
        </classpath>
    </java>
	<move file="parser.java" tofile="src/jasmin/parser.java"/>
	<move file="sym.java" tofile="src/jasmin/sym.java"/>
          
  </target>

  <!-- =================================================================== -->
  <!-- Build all jars in ./build                                           -->
  <!-- =================================================================== -->
  <target name="all" depends="jasmin,docs"/>

  <!-- =================================================================== -->
  <!-- Creates the API documentation in ./docs/api/                        -->
  <!-- =================================================================== -->
  <target name="docs">
    <mkdir dir="${apidocs.dir}"/>
    <javadoc packagenames="${packages}"
             link="http://java.sun.com/j2se/1.4/docs/api"
             sourcepath="${src.dir}"
             destdir="${apidocs.dir}"
             author="true"
             additionalparam="-source 1.4"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Jonathan Meyer, USA All rights reserved."             
    />
  </target>

  <!-- =================================================================== -->
  <!-- Build source distribution in ./dist                                 -->
  <!-- =================================================================== -->
  <target name="sourcedist" depends="clean">
    <mkdir dir="${dist.root}"/>
    <mkdir dir="${sourcedist.dir}"/>

    <copy todir="${sourcedist.dir}">
      <fileset dir="${root.dir}"/>
    </copy>

    <!-- Now delete what we dont want, probably a better way to do this -->
    <delete dir="${sourcedist.dir}/dist"/>
    <delete dir="${sourcedist.dir}/classes"/>

    <zip zipfile="${dist.root}/${name}-${version}.zip"
         basedir="${dist.root}/${name}-${version}"
         whenempty="create"
    />
  </target>
  
  <!-- =================================================================== -->
  <!-- Build compiled distribution in ./dist                               -->
  <!-- =================================================================== -->
  <target name="compiledist" depends="clean, all">
    <mkdir dir="${dist.root}"/>
    <mkdir dir="${compiledist.dir}"/>

    <copy todir="${compiledist.dir}">
      <fileset dir="${root.dir}"/>
    </copy>

    <!-- Now delete what we dont want, probably a better way to do this -->
    <delete dir="${compiledist.dir}/dist"/>
    <delete dir="${compiledist.dir}/build"/>


    <zip zipfile="${dist.root}/${name}-${version}.zip"
         basedir="${dist.root}/${name}-${version}"
         whenempty="create"
    />
  </target>
  
  <!-- =================================================================== -->
  <!-- Clean restores distribution to original state                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.root}"/>
    <delete dir="${apidocs.dir}"/>
  </target>
</project>

<!-- End of file -->